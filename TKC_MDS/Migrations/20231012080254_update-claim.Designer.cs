// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TKC_MDS.Data;

#nullable disable

namespace TKC_MDS.Migrations
{
    [DbContext(typeof(MSD_Context))]
    [Migration("20231012080254_update-claim")]
    partial class updateclaim
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TKC_MDS.Data.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TKC_MDS.Data.Roles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TKC_MDS.Models.AdjustOrderRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AdjustOrderRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b7aaf50-04e7-42db-b619-d695f7495b4b"),
                            Description = "View",
                            Name = "ViewAdjustOrder",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(3011)
                        },
                        new
                        {
                            Id = new Guid("20886647-511c-40c1-bcf1-5e477c13bf45"),
                            Description = "Create",
                            Name = "CreateAdjustOrder",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(3018)
                        },
                        new
                        {
                            Id = new Guid("ca080ab6-801a-4695-92e0-77827e1474f6"),
                            Description = "Edit",
                            Name = "EditAdjustOrder",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(3019)
                        },
                        new
                        {
                            Id = new Guid("02dec1fd-1e18-4e60-9d84-d7b11c3ae919"),
                            Description = "Delete",
                            Name = "DeleteAdjustOrder",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(3020)
                        });
                });

            modelBuilder.Entity("TKC_MDS.Models.ClaimRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AccessRolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAllow")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClaimRoles");
                });

            modelBuilder.Entity("TKC_MDS.Models.DataTypeRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DataTypeRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c74ba44-fedf-4fac-8ec0-271aa5319f06"),
                            Description = "View",
                            Name = "ViewDataType",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(3053)
                        },
                        new
                        {
                            Id = new Guid("a1ee02cf-7658-4057-849a-541b8ae0a5c7"),
                            Description = "Create",
                            Name = "CreateDataType",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(3055)
                        },
                        new
                        {
                            Id = new Guid("4aea9f59-752a-44ad-a523-6a5d57c2a47e"),
                            Description = "Edit",
                            Name = "EditDataType",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(3056)
                        },
                        new
                        {
                            Id = new Guid("b73f0d9d-d4f5-469e-8d60-a487b0b25c7e"),
                            Description = "Delete",
                            Name = "DeleteDataType",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(3058)
                        });
                });

            modelBuilder.Entity("TKC_MDS.Models.ManageUserRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ManageUserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8e6b1b4-6782-42dd-81ce-98fc16352c08"),
                            Description = "View",
                            Name = "ViewUser",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(3106)
                        },
                        new
                        {
                            Id = new Guid("caa69c69-b78d-4cfc-a97d-e6f7ffca77fb"),
                            Description = "Create",
                            Name = "CreateUser",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(3109)
                        },
                        new
                        {
                            Id = new Guid("81caf1d6-4667-4270-a482-a4eb1720a07a"),
                            Description = "Edit",
                            Name = "EditUser",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(3110)
                        },
                        new
                        {
                            Id = new Guid("9868fe19-301a-4097-80fd-8af6fd6eb8f8"),
                            Description = "Delete",
                            Name = "DeleteUser",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(3111)
                        });
                });

            modelBuilder.Entity("TKC_MDS.Models.ReportRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ReportRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9be0055c-ba61-4733-a4c8-f313b3694c94"),
                            Description = "View",
                            Name = "ViewReport",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(3082)
                        },
                        new
                        {
                            Id = new Guid("14a4c151-3ea7-4192-a5c4-16cd28a0c2cc"),
                            Description = "Create",
                            Name = "CreateReport",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(3085)
                        },
                        new
                        {
                            Id = new Guid("ef964928-f3a4-49c1-a7eb-2d40449e866b"),
                            Description = "Edit",
                            Name = "EditReport",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(3086)
                        },
                        new
                        {
                            Id = new Guid("99a90e28-efa6-4ef4-8f97-88ca06b6efc1"),
                            Description = "Delete",
                            Name = "DeleteReport",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(3087)
                        });
                });

            modelBuilder.Entity("TKC_MDS.Models.SaveOrderRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SaveOrderRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ddc39e2-dce2-46ca-9e60-6fd171fc751a"),
                            Description = "View",
                            Name = "ViewOrder",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(2922)
                        },
                        new
                        {
                            Id = new Guid("06d92eef-ca21-411d-a07c-2e3d6c4be449"),
                            Description = "Create",
                            Name = "CreateOrder",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(2927)
                        },
                        new
                        {
                            Id = new Guid("d7c4a683-710b-4086-97e7-fe588aff7d61"),
                            Description = "Edit",
                            Name = "EditOrder",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(2928)
                        },
                        new
                        {
                            Id = new Guid("1c898c1a-f812-4c44-9c8b-9083ccfa0e8a"),
                            Description = "Delete",
                            Name = "DeleteOrder",
                            UpdateDate = new DateTime(2023, 10, 12, 8, 2, 54, 354, DateTimeKind.Utc).AddTicks(2930)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("TKC_MDS.Data.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TKC_MDS.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TKC_MDS.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("TKC_MDS.Data.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TKC_MDS.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TKC_MDS.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
