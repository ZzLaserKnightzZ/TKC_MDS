@{
	ViewData["Title"] = "Order";
}


<div class="row"> 
	<div class="col-xl-2  "></div>

<!--begin::Col-->
<div class="col-xl-8  ">
	<!--begin::Table Widget 5-->
	<div class="card card-flush h-xl-100">
		<!--begin::Card header-->
		<div class="card-header pt-7">
			<!--begin::Title-->
			<h3 class="card-title align-items-start flex-column">
				<span class="card-label fw-bold text-dark">บันทึก Order</span>
			</h3>
			<!--end::Title-->
			<!--begin::Actions-->
			<!--end::Actions-->
		</div>
		<!--end::Card header-->
		<!--begin::Card body-->
		<div class="card-body table-responsive">
			<!--begin::Table-->
			<form id="form" onsubmit="return false">

			<table class="table align-middle fs-6 gy-3  " @*id="kt_table_widget_5_table"*@>
				<!--begin::Table head-->
				<!--begin::Table row-->
				<tbody>
					<tr class="text-start  fw-bold fs-7 text-uppercase gs-0">
						<th class="text-end  text-gray-400 pe-3 min-w-100px">
									ลูกค้า :					
						</th>
						<td class="text-end pe-3 min-w-50px">
									<select class="form-select form-select-sm form-select-solid w-200px" name="CusTumerId" id="select_custumer" onchange="selectedDataType()">
								@*<option value="0" selected="selected" >
									เลือกลูกค้า
								</option>
								<option value="1">4302-MITSUBISHI P/C</option>
								<option value="2">4303-TOYOTA </option>*@

							</select>
						</td>
					</tr>
					<tr class="text-start  fw-bold fs-7 text-uppercase gs-0">
						<th class="text-end  text-gray-400 pe-3 min-w-100px">
							ประเภทข้อมูล :
						</th>
						<td class="text-end pe-3 min-w-50px">
									<select class="form-select form-select-sm form-select-solid w-200px" name="DataType" id="select_dataType" onchange="selectedDataType()">
								@*<option value="0" selected="selected"  >
									เลือกประเภทข้อมูล
								</option>
								<option value="1">01- P/O</option>
								<option value="2">02- Forecast </option>*@
							</select>
						</td>


					</tr>

					<!--end::Table row-->
					<!--end::Table head-->

				</tbody>
			</table>
			</form>
			<!--end::Table-->
			<div class="d-flex justify-content-center">
					<input type="file" id="inpu_file" accept=".txt, .csv" style="display:none;" />
				<button onClick="importFile()" class="btn btn-sm fw-bold btn-secondary me-2" id="btn_import" disabled>import</button>
				<button class="btn btn-sm fw-bold btn-primary me-2" onclick="SaveOrder()">บันทึก</button>
				<button class="btn btn-sm fw-bold btn-danger" onclick="clearData()">ล้าง / ยกเลิก</button>
			</div>

		</div>
		<div class="card-body table-responsive">
			<!--begin::Table-->
			<table class="table align-middle fs-6 gy-3 table-striped table-bordered " >
				<!--begin::Table head-->
				<thead >
					<!--begin::Table row-->
					<tr class="text-start  fw-bold fs-7 text-uppercase gs-0" id="title_head">
						<th class="text-start  text-gray-400 pe-3 min-w-10px">No</th>
						<th class="text-start  text-gray-400 pe-3 min-w-100px">
							OrderNo
						</th>
						<th class="text-center  text-gray-400 pe-3 min-w-100px">
							DueDate-DMY
						</th>
						<th class="text-start  text-gray-400 pe-3 min-w-100px">
							PartNo
						</th>
						<th class="text-center  text-gray-400 pe-3 min-w-100px">
							Qty
						</th>
						<th class="text-start  text-gray-400 pe-3 min-w-100px">
							OrderNo
						</th>
						<th class="text-center  text-gray-400 pe-3 min-w-100px">
							PlantCode
						</th>

					</tr>

					<!--end::Table row-->
				</thead>
				<!--end::Table head-->
				<tbody id="table_body">
					<tr>
						<td class="text-start  pe-3 min-w-10px"></td>
						<td class="text-center  pe-3 min-w-100px"></td>
						<td class="text-center pe-3 min-w-100px"></td>
					</tr>
					<tr>
						<td class="text-start  pe-3 min-w-10px"></td>
						<td class="text-center  pe-3 min-w-100px"></td>
						<td class="text-center pe-3 min-w-100px"></td>
					</tr>
					<tr>
						<td class="text-start  pe-3 min-w-10px"></td>
						<td class="text-center  pe-3 min-w-100px"></td>
						<td class="text-center pe-3 min-w-100px"></td>
					</tr>
					<tr>
						<td class="text-start  pe-3 min-w-10px"></td>
						<td class="text-center  pe-3 min-w-100px"></td>
						<td class="text-center pe-3 min-w-100px"></td>
					</tr>
					<tr>
						<td class="text-start  pe-3 min-w-10px"></td>
						<td class="text-center  pe-3 min-w-100px"></td>
						<td class="text-center pe-3 min-w-100px"></td>
					</tr>
					<tr>
						<td class="text-start  pe-3 min-w-10px"></td>
						<td class="text-center  pe-3 min-w-100px"></td>
						<td class="text-center pe-3 min-w-100px"></td>

					</tr>
				</tbody>
			</table>
			<!--end::Table-->


		</div>
		<!--end::Card body-->
	</div>
	<!--end::Table Widget 5-->
</div>
<!--end::Col-->
</div>
<!--form onsubmit="return false" id="form_saveData" -->

<!--form-->
<script>
	var FILLTER_COLUMN_BY_TYPE = [];
	var DATATYPE_CUST = {};
	var SEPERATER = null;
	var SJSON_FORM = "";

	const selected_file = (e)=>{
		try{

		
			//SEPERATER = null;
			const file = e.target.files[0];
			const reader = new FileReader();
			if (!file || FILLTER_COLUMN_BY_TYPE.length === 0) return;

			reader.onload = ()=>{
				//กำหนดค่าของ header
				let title = document.getElementById("title_head");
					title.innerHTML = FILLTER_COLUMN_BY_TYPE.reduce((prev, curr) => prev += `<th class="text-center  text-gray-400 pe-3 min-w-100px">${curr?.field}</th>`, "");
				console.log("cols type",FILLTER_COLUMN_BY_TYPE);
				const text = reader.result; //อ่านไฟ
				const line_text = text.split("\r\n"); //แยกแถว

				if (SEPERATER === null || SEPERATER === "") { //ไม่มีตัวขั้น if(SEPERATER)
					if (line_text.length > 0) {
						let row = [];
						for (let index = 0; index < line_text.length; index++){ //แยกข้อมูลจากแถว
							//row[index] = FILLTER_COLUMN_BY_TYPE.map(col => line_text[index].substring(col.start, col.start+col.size));
							if (DATATYPE_CUST?.rowManyDue) { //หนึ่งแถวข้อมูลมีหลายDue :
								let another_filed = FILLTER_COLUMN_BY_TYPE.map(col => line_text[index].substring(col.start -1 , (col.start + col.size) -1 ));
								//console.log("type",FILLTER_COLUMN_BY_TYPE);
								const dueDate = FILLTER_COLUMN_BY_TYPE.find(type => type.field.startsWith("DueDate"));
								const qty = FILLTER_COLUMN_BY_TYPE.find(type => type.field.startsWith("Qty"));
								//manyDueType
								/*
								ดิวติดดิว = 1
								ดิวติดกับจำนวน = 0
								*/
								if (DATATYPE_CUST?.manyDueType) { //Due ติดกับ Due
									try{
										let arsDueDate = [],arsQty=[];
										/*
										1. 1แถวมีกี่ชุด
										2. 1ชุดมีกี่ตัว
										3. ทั้ง 2ตัวมีจุดเริ่มต้นแตกต่างกัน ชุดต่อไป ค่าของความยาวของข้อมูลใน1ชุด
										4. เริ่มเก็บข้อมูลตามจำนวนชุด ตามจำนวน
										*/
										//-------------------dueDate---------------------------
										let iSet_index_dueDate = dueDate?.start;
										for (let iDataSet_index = 0; iDataSet_index < DATATYPE_CUST.manyDueSetNo; iDataSet_index++) { //1
											let sOne_set = line_text[index].substring(iSet_index_dueDate > 0 ? iSet_index_dueDate - dueDate.size - 1:0, iSet_index_dueDate + DATATYPE_CUST.manyDueDataLong /*set + set length*/);//set
											let iData_index = 0;
											for (let iDataNo = 0; iDataNo < DATATYPE_CUST.manyDueDataNo; iDataNo++) {//2
												let sData = sOne_set.substring(iData_index, iData_index + dueDate.size);
												arsDueDate.push(sData);
												iData_index += dueDate.size; //next data inedx
											}
											iSet_index_dueDate += DATATYPE_CUST.manyDueDataLong; //nextset
										}
										//-------------------dueDate---------------------------
										//-------------------qty-------------------------------
										let iSet_qty = qty?.start;
										for (let iDataSet_index = 0; iDataSet_index < DATATYPE_CUST.manyDueSetNo; iDataSet_index++) {
											let sOne_set = line_text[index].substring(iSet_qty > 0 ? iSet_qty - qty.size - 1 : 0, iSet_qty + DATATYPE_CUST.manyDueDataLong /*set + set length*/);//set
											let iData_index = 0;
											for (let iDataNo = 0; iDataNo < DATATYPE_CUST.manyDueDataNo; iDataNo++) {
												let sData = sOne_set.substring(iData_index, iData_index + qty.size);
												arsQty.push(sData);
												iData_index += qty.size;//next data inedx
											}
											iSet_qty += DATATYPE_CUST.manyDueDataLong; //nextset
										}
										//-------------------qty---------------------------
										//------------------add data-----------------------
										let arsDueDate_Qty = [];
										let iDueDate_index = FILLTER_COLUMN_BY_TYPE.findIndex(type => type.field.startsWith("DueDate"));
										let iQty_index = FILLTER_COLUMN_BY_TYPE.findIndex(type => type.field.startsWith("Qty"));
										for (let iAddData_index = 0; iAddData_index < arsDueDate.length; iAddData_index++) {
											let new_row = [...another_filed];
											const iQty = Number(arsQty[iAddData_index]); //convert to int
											new_row[iQty_index] = arsQty[iAddData_index]; //modifire qty
											new_row[iDueDate_index] = arsDueDate[iAddData_index]; //modifire duedate
											if (iQty > 0)//filter valuue
												arsDueDate_Qty.push(new_row); //string[]
										}
										row = [...row,...arsDueDate_Qty];
										//------------------add data-----------------------
									}catch(ex){
										console.log(ex);
									}
								} else {//Due สลับกับ Qty
									try {
										//------------------dueDAte------------------------
										let iSet_index_dueDate = dueDate?.start;
										let arsDueDate= [];
										for (let iDataSet_index = 0; iDataSet_index < DATATYPE_CUST.manyDueSetNo; iDataSet_index++) { 
											let sOne_set = line_text[index].substring(iSet_index_dueDate > 0 ? iSet_index_dueDate - 1 : 0, iSet_index_dueDate + DATATYPE_CUST.manyDueSetNo - 1);
											//console.log(sOne_set, iSet_index_dueDate, iSet_index_dueDate + DATATYPE_CUST.manyDueSetNo);
											let sDueadate = sOne_set.substring(0,dueDate?.size);//ไม่แน่ใจว่า ใน1ชุดมีกี่อัน
											arsDueDate.push(sDueadate);
											//console.log(sDueadate);
											iSet_index_dueDate += DATATYPE_CUST.manyDueSetNo;
										}
										//------------------dueDAte------------------------
										//------------------qty------------------------
										let iSet_qty = qty?.start;
										let arsQty=[];
										for (let iDataSet_index = 0; iDataSet_index < DATATYPE_CUST.manyDueSetNo; iDataSet_index++) {
											let sOne_set = line_text[index].substring(iSet_qty > 0 ? iSet_qty - 1 : 0, iSet_qty + DATATYPE_CUST.manyDueSetNo - 1);
											//console.log(sOne_set, iSet_index_dueDate, iSet_index_dueDate + DATATYPE_CUST.manyDueSetNo);
											let sDueadate = sOne_set.substring(0, qty?.size);//ไม่แน่ใจว่า ใน1ชุดมีกี่อัน
											arsQty.push(sDueadate);
											//console.log(sDueadate);
											iSet_qty += DATATYPE_CUST.manyDueSetNo;
										}
										console.log(arsQty, arsDueDate);
										//------------------qty------------------------
										//-----------------addata----------------------
										let arsDueDate_Qty = [];
										let iDueDate_index = FILLTER_COLUMN_BY_TYPE.findIndex(type => type.field.startsWith("DueDate"));
										let iQty_index = FILLTER_COLUMN_BY_TYPE.findIndex(type => type.field.startsWith("Qty"));
										for (let iAddData_index = 0; iAddData_index < arsDueDate.length; iAddData_index++) {
											let new_row = [...another_filed];
											const iQty = Number(arsQty[iAddData_index]); //convert to int
											console.log("qty:"+iQty);
											new_row[iQty_index] = arsQty[iAddData_index]; //modifire qty
											new_row[iDueDate_index] = arsDueDate[iAddData_index]; //modifire duedate
											if (iQty > 0) //filter valuue
												arsDueDate_Qty.push(new_row); //string[]
										}
										row = [...row, ...arsDueDate_Qty];
										//-----------------addata----------------------
									} catch (ex) {
										console.log(ex);
									}
								}

							} else { //หนึ่งแถวข้อมูลมีDueเดียว :
								row.push(FILLTER_COLUMN_BY_TYPE.map(col => line_text[index].substring(col.start > 0 ? col.start - 1:0, col.start + col.size - 1)));
							}
						}

						//for check each cols
						const regxDate = new RegExp("(^[0-9]+/[0-9]+/[0-9]+$)|(^[0-9]+\-[0-9]+\-[0-9]+$)|(^[0-9]+\\s?[A-Za-z]+\\s?[0-9]+$)|(^[0-9]{1,8}$)");
						const dueDate = FILLTER_COLUMN_BY_TYPE.findIndex(_ => _.field.startsWith("DueDate"));
						const partNo = FILLTER_COLUMN_BY_TYPE.findIndex(_ => _.field === "PartNo");
						const qty = FILLTER_COLUMN_BY_TYPE.findIndex(_ => _.field === "Qty");
						let newRow = [];
						row.forEach(cols => {
							try {
								if (regxDate.test(cols[dueDate]) === true && cols[partNo] !== "" && Number(cols[qty]) > 0) { //กรองฟอร์มต้องมี3ค่านี้
									//dueDate type
									const dueDateFormat = FILLTER_COLUMN_BY_TYPE.find(_ => _.field.startsWith("DueDate"));
									let dueDate_format = "";
									let date = null;
									let mount = null;
									if (dueDateFormat) {
										//format ทั้งหมดเป็น mm/dd/yyyy
										switch (dueDateFormat.field) {
											case "DueDate-DMY":
												date = cols[dueDate].split("/");
												dueDate_format = `${date[1]}/${date[0]}/${Number(date[2])}`;
												break;
											case "DueDate-Dชื่อย่อYY":
												date = cols[dueDate].split(" ");
												mount = getMount(date[1]);
												dueDate_format = `${mount}/${date[0]}/${Number(date[2]) + 2000}`;
												break;
											case "DueDate-Dชื่อย่อYYYY":
												date = cols[dueDate].split(" ");
												mount = getMount(date[1]);
												dueDate_format = `${mount}/${date[0]}/${Number(date[2])}`;
												break;
											case "DueDate-MDY":
												date = cols[dueDate].split("/");
												dueDate_format = `${date[0]}/${date[1]}/${Number(date[2])}`;
												break;
											case "DueDate-YMD":
												/*
												date = cols[dueDate].split("/");
												dueDate_format = `${date[1]}/${date[2]}/${Number(date[0])}`;
												*/
												dueDate_format = cols[dueDate].replace(/(\d{4})(\d{2})(\d{2})/g, "$2/$3/$1");
												//cols[dueDate] = dueDate_format;
												break;
										}
										cols[dueDate] = dueDate_format;//เปลี่ยนฟอแมทเรียบร้อยเเล้ว
									}
									newRow.push(cols);
								}
							} catch (ex) {
								console.log(ex);
							}
						});

						let body = document.getElementById("table_body");
						body.innerHTML = row.reduce((prev, curr) => prev += `<tr>${curr?.reduce((prev1, curr1) => prev1 += `<td class="text-center  pe-3 min-w-100px">${curr1}</td>`, "")}</tr>`, "");

						const custId = document.getElementById("select_custumer").value;
						
						//const form = newRow.reduce((prev, curr, i) => prev += `<input type="hidden" name="[${i}][CustID]" value="${custId}" >
						//													<input type="hidden" name="[${i}][DataFileName]" value="${file.name}" >
						//													<input type="hidden" name="[${i}][DataType]" value ="${document.getElementById("select_dataType").value}" >` + FILLTER_COLUMN_BY_TYPE.reduce((prev1, curr1, index) => prev1 += `<input type="hidden" name="[${i}][${curr1?.field.startsWith("DueDate") ? "DueDate" : curr1?.field}]" value="${curr[index]}"> `, ""), "");
						//document.getElementById("form_saveData").innerHTML = form;
						
						const form = newRow.reduce((prev, curr, i) => prev += `{"CustID":"${custId}","DataFileName":"${file.name}","DataType":"${document.getElementById("select_dataType").value}" ${FILLTER_COLUMN_BY_TYPE.reduce((prev1, curr1, index) => prev1 += `,"${curr1?.field.startsWith("DueDate") ? "DueDate" : curr1?.field}":"${curr[index]}"`, "")}},`, "");
						SJSON_FORM = "[" + form.substring(0, form.length - 1) + "]";//remove tail (,)
						/*
						//test
						console.log(JSON.parse(data1));
						fetch("/order/SaveOrders", {
							method: "post", body: data1, headers: {
								"Content-Type": "application/json",
							}
						}).then(res => res.json()).then(d => console.log(d)).catch(error => console.log(error))
						*/

					}
				}else{//แบบมีตัวขั้น
					if (line_text.length > 0) {
						//const header = line_text[0].split(SEPERATER);
						const row = [];


						for (let index = 0; index < line_text.length - 1; index++) {  //แยกข้อมูลจากแถว
								const rows = line_text[index].split(SEPERATER);
							row.push(FILLTER_COLUMN_BY_TYPE.map(col => rows[col.start] ? rows[col.start] : ""));
						}

						//for check each cols
						const regxDate = new RegExp("(^[0-9]+/[0-9]+/[0-9]+$)|(^[0-9]+\-[0-9]+\-[0-9]+$)|(^[0-9]+\\s?[A-Za-z]+\\s?[0-9]+$)|(^[0-9]{1,8}$)");
						const dueDate = FILLTER_COLUMN_BY_TYPE.findIndex(_ => _.field.startsWith("DueDate"));
						const partNo = FILLTER_COLUMN_BY_TYPE.findIndex(_ => _.field === "PartNo");
						const qty = FILLTER_COLUMN_BY_TYPE.findIndex(_ => _.field === "Qty");
						let newRow = [];
						//filter check 
							row.forEach( cols => {
								try{
									if (regxDate.test(cols[dueDate]) === true && cols[partNo] !== "" && Number(cols[qty]) > 0) {
									//dueDate type
									const dueDateFormat = FILLTER_COLUMN_BY_TYPE.find(_ => _.field.startsWith("DueDate"));
									let dueDate_format = "";
									let date = null;
									let mount = null;
									if (dueDateFormat) {
										//format ทั้งหมดเป็น mm/dd/yyyy
										switch (dueDateFormat.field) {
											case "DueDate-DMY":
												date = cols[dueDate].split("/");
												dueDate_format = `${date[1]}/${date[0]}/${Number(date[2])}`;
												break;
											case "DueDate-Dชื่อย่อYY":
												date = cols[dueDate].split(" ");
												mount = getMount(date[1]);
												dueDate_format = `${mount}/${date[0]}/${Number(date[2]) + 2000}`;
												break;
											case "DueDate-Dชื่อย่อYYYY":
												date = cols[dueDate].split(" ");
												mount = getMount(date[1]);
												dueDate_format = `${mount}/${date[0]}/${Number(date[2])}`;
												break;
											case "DueDate-MDY":
												date = cols[dueDate].split("/");
												dueDate_format = `${date[0]}/${date[1]}/${Number(date[2])}`;
												break;
											case "DueDate-YMD":
												/*
												date = cols[dueDate].split("/");
												dueDate_format = `${date[1]}/${date[2]}/${Number(date[0])}`;
												*/
												dueDate_format = cols[dueDate].replace(/(\d{4})(\d{2})(\d{2})/g, "$2-$3-$1");
												break;
										}
										cols[dueDate] = dueDate_format;//เปลี่ยนฟอแมทเรียบร้อยเเล้ว
									}
										newRow.push(cols);
									}
								}catch(ex){
									console.log(ex);
								}

							});


						const custId = document.getElementById("select_custumer").value;
						/*
						let form = newRow.reduce((prev, curr, i) => prev += `<input type="hidden" name="[${i}][CustID]" value="${custId}" >
																		<input type="hidden" name="[${i}][DataFileName]" value="${file.name}" >
																			<input type="hidden" name = "[${i}][DataType]" value ="${document.getElementById("select_dataType").value}" >` 
																			+ FILLTER_COLUMN_BY_TYPE.reduce((prev1, curr1, index) => prev1 += `<input type="hidden" name="[${i}][${curr1?.field.startsWith("DueDate") ? "DueDate" : curr1?.field}]" value="${curr[index]}"> `, ""), "");
						//console.log(form);
						document.getElementById("form_saveData").innerHTML = form;
						*/
						const form = newRow.reduce((prev, curr, i) => prev += `{"CustID":"${custId}","DataFileName":"${file.name}","DataType":"${document.getElementById("select_dataType").value}" ${FILLTER_COLUMN_BY_TYPE.reduce((prev1, curr1, index) => prev1 += `,"${curr1?.field.startsWith("DueDate") ? "DueDate" : curr1?.field}":"${curr[index]}"`, "")}},`, "");
						SJSON_FORM = "[" + form.substring(0, form.length - 1) + "]";//remove tail (,)

						let body = document.getElementById("table_body");
						body.innerHTML = row.reduce((prev, curr) => prev += `<tr>${curr?.reduce((prev1, curr1) => prev1 += `<td class="text-center  pe-3 min-w-100px">${curr1}</td>`, "")}</tr>`, "");
					}
				}
			}

			reader.readAsText(file);

		 }catch(ex){
			 console.warn(ex.message);
			Swal.fire('เกิดข้อผิดพลาด');
			//e.target.files[0] = null;
		 }finally{

		 }

	}

	const SaveOrder = () =>{
		/*
		let form = document.getElementById("form_saveData");
		let formData = new FormData(form);
		console.log(form,formData);
		for (const key of formData) {
			console.log(key);
		}*/
		fetch("/order/saveorders", { method: "post", body: SJSON_FORM, headers: { "Content-Type": "application/json", }})
		.then(res=>res.json())
		.then(data => {
				if (data.msg) {
					Swal.fire({
						position: 'top-end',
						icon: 'success',
						title: data.msg,
						showConfirmButton: false,
						timer: 15000
					}).then(resault => {
						window.location.href = "/order/SaveOrder";
					});
				} else {
					Swal.fire('Error > ' + data.error);
				}
		}).catch(error => {
			Swal.fire('เกิดข้อผิดพลาด');
			console.log(error);
		})
	}

	const clearData = ()=>{
		let file = document.getElementById("inpu_file");
		file.value = "";
		//window.location.href = "/order/saveorder";
		let table_data = document.getElementById("table_body");
		//document.getElementById('select_custumer').querySelectorAll('option')[0].selected = 'selected';
		//document.getElementById('select_dataType').querySelectorAll('option')[0].selected = 'selected';
		table_data.innerHTML = "";
		document.getElementById("form_saveData").innerHTML = "";
		SJSON_FORM="";
		//FILLTER_COLUMN_BY_TYPE = [];
		//SEPERATER = null;
		
	}

	const importFile = ()=>{
		let file = document.getElementById("inpu_file");
		//file.value = [];
		file.click();
	}

	const selectedDataType =()=>{

		let select_custumer = document.getElementById("select_custumer").value;
		const type_code = document.getElementById("select_dataType").value;

		if (select_custumer && type_code) {

			fetch("/order/JsondataType_cust?custId=" + select_custumer + "&typeCode=" + type_code)
			.then(res=>res.json())
			.then(data=>{
					console.log("type>",data);
					DATATYPE_CUST=data;
			}).catch(error => console.log(error));

			fetch("/order/JsonFormConv?custId=" + select_custumer + "&typeCode="+type_code)
			.then(res => res.json())
			.then(data => {
				let btn_import = document.getElementById("btn_import");
				if(data.length > 0){
					btn_import.disabled = false;
					SEPERATER = (data[0].separater === "Tab" ? "\t" : data[0].separater);
					FILLTER_COLUMN_BY_TYPE = data.map(formConv => {
						return { field: formConv?.fieldName, start: formConv?.startPosition, size: formConv?.dataSize, dataType: formConv?.dataType };
					});
				}else{
					btn_import.disabled = true;
					Swal.fire('ไม่พบประเภทข้อมูล');
				}
			}).catch(error => console.log(error));
		}else{
			//Swal.fire('กรุณาเลือก ลูกค้า');
		}

	}

	window.onload = async ()=>{

		let inpu_file = document.getElementById("inpu_file");
		inpu_file.addEventListener("change", selected_file);

		let select_custumer = document.getElementById("select_custumer");
		const listUser = await fetch("/order/JsonCustumer");
		const users_json = await listUser.json();
		select_custumer.innerHTML = users_json.reduce((prev, curr) => prev += `<option value="${curr?.custID}">${curr?.custID}-${curr?.custName} </option>`, `<option selected value="" >---เลือก---</option>`);

		const dataType = await fetch("/order/JsonDataType_MS");
		const data_type = await dataType.json();
		let select_dataType = document.getElementById("select_dataType");
		select_dataType.innerHTML = data_type.reduce((prev, curr) => prev += `<option value="${curr?.typeCode}">${curr?.typeCode}-${curr?.typeName}</option>`, `<option selected value="" > ---เลือก--- </option> `);
		select_dataType.addEventListener("change", selectedDataType);
	
	}

	const getMount = (mountName) => {
		if (mountName.includes("jan")) {
			return "01";
		}
		else if (mountName.includes("feb")) {
			return "02";
		}
		else if (mountName.includes("mar")) {
			return "03";
		}
		else if (mountName.includes("apr")) {
			return "04";
		}
		else if (mountName.includes("may")) {
			return "05";
		}
		else if (mountName.includes("jun")) {
			return "06";
		}
		else if (mountName.includes("jul")) {
			return "07";
		}
		else if (mountName.includes("aug")) {
			return "08";
		}
		else if (mountName.includes("sep")) {
			return "09";
		}
		else if (mountName.includes("oct")) {
			return "10";
		}
		else if (mountName.includes("nov")) {
			return "11";
		}
		else if (mountName.includes("dec")) {
			return "12";
		}
	}
</script>